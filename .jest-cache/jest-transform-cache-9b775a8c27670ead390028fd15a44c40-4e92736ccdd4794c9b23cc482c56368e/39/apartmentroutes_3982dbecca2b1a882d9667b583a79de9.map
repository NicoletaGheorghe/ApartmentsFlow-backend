{"version":3,"names":["express","require","router","Router","protect","authorize","validateApartmentQuery","getApartments","getApartment","createApartment","updateApartment","deleteApartment","validateApartmentInput","req","res","next","title","description","price","location","body","errors","trim","length","push","isNaN","address","status","json","get","post","put","delete","module","exports"],"sources":["apartment.routes.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { protect, authorize } = require('../middleware/auth.middleware');\nconst { validateApartmentQuery } = require('../middleware/validation.middleware');\nconst {\n  getApartments,\n  getApartment,\n  createApartment,\n  updateApartment,\n  deleteApartment,\n} = require('../controllers/apartment.controller');\n\n// Validation middleware\nconst validateApartmentInput = (req, res, next) => {\n  const { title, description, price, location } = req.body;\n  const errors = [];\n\n  if (!title || title.trim().length < 3) {\n    errors.push('Title must be at least 3 characters long');\n  }\n\n  if (!description || description.trim().length < 10) {\n    errors.push('Description must be at least 10 characters long');\n  }\n\n  if (!price || isNaN(price) || price <= 0) {\n    errors.push('Price must be a positive number');\n  }\n\n  if (!location || !location.address) {\n    errors.push('Location with address is required');\n  }\n\n  if (errors.length > 0) {\n    return res.status(400).json({ errors });\n  }\n\n  next();\n};\n\n// Public routes - accessible without authentication\nrouter.get('/public', validateApartmentQuery, getApartments); // Public listings only\n\n// Protected routes - require authentication\nrouter.get('/', protect, validateApartmentQuery, getApartments); // All listings based on role\nrouter.get('/:id', protect, getApartment);\nrouter.post('/', protect, authorize('admin', 'agent'), validateApartmentInput, createApartment);\nrouter.put('/:id', protect, validateApartmentInput, updateApartment);\nrouter.delete('/:id', protect, deleteApartment);\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Apartment:\n *       type: object\n *       required:\n *         - title\n *         - description\n *         - price\n *         - location\n *       properties:\n *         title:\n *           type: string\n *           description: Title of the apartment listing\n *         description:\n *           type: string\n *           description: Detailed description of the apartment\n *         price:\n *           type: number\n *           description: Monthly rent price\n *         location:\n *           type: object\n *           required:\n *             - address\n *             - coordinates\n *           properties:\n *             address:\n *               type: string\n *               description: Full address of the apartment\n *             coordinates:\n *               type: object\n *               properties:\n *                 lat:\n *                   type: number\n *                   description: Latitude coordinate\n *                 lng:\n *                   type: number\n *                   description: Longitude coordinate\n *         bedrooms:\n *           type: number\n *           description: Number of bedrooms\n *         bathrooms:\n *           type: number\n *           description: Number of bathrooms\n *         squareFeet:\n *           type: number\n *           description: Size of the apartment in square feet\n *         amenities:\n *           type: array\n *           items:\n *             type: string\n *           description: List of available amenities\n *         images:\n *           type: array\n *           items:\n *             type: string\n *           description: URLs of apartment images\n *         availableFrom:\n *           type: string\n *           format: date\n *           description: Date when the apartment becomes available\n */\n\n/**\n * @swagger\n * /api/apartments:\n *   get:\n *     summary: Get all apartments with optional filters\n *     tags: [Apartments]\n *     parameters:\n *       - in: query\n *         name: minPrice\n *         schema:\n *           type: number\n *         description: Minimum price filter\n *       - in: query\n *         name: maxPrice\n *         schema:\n *           type: number\n *         description: Maximum price filter\n *       - in: query\n *         name: bedrooms\n *         schema:\n *           type: number\n *         description: Number of bedrooms filter\n *       - in: query\n *         name: location\n *         schema:\n *           type: string\n *         description: Location search term\n *       - in: query\n *         name: page\n *         schema:\n *           type: number\n *         description: Page number for pagination\n *       - in: query\n *         name: limit\n *         schema:\n *           type: number\n *         description: Number of items per page\n *     responses:\n *       200:\n *         description: List of apartments\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 count:\n *                   type: number\n *                 pagination:\n *                   type: object\n *                   properties:\n *                     page:\n *                       type: number\n *                     limit:\n *                       type: number\n *                     total:\n *                       type: number\n *                 data:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/Apartment'\n */\n\nmodule.exports = router;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAM;EAAEC,OAAO;EAAEC;AAAU,CAAC,GAAGJ,OAAO,CAAC,+BAA+B,CAAC;AACvE,MAAM;EAAEK;AAAuB,CAAC,GAAGL,OAAO,CAAC,qCAAqC,CAAC;AACjF,MAAM;EACJM,aAAa;EACbC,YAAY;EACZC,eAAe;EACfC,eAAe;EACfC;AACF,CAAC,GAAGV,OAAO,CAAC,qCAAqC,CAAC;;AAElD;AACA,MAAMW,sBAAsB,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACjD,MAAM;IAAEC,KAAK;IAAEC,WAAW;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGN,GAAG,CAACO,IAAI;EACxD,MAAMC,MAAM,GAAG,EAAE;EAEjB,IAAI,CAACL,KAAK,IAAIA,KAAK,CAACM,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;IACrCF,MAAM,CAACG,IAAI,CAAC,0CAA0C,CAAC;EACzD;EAEA,IAAI,CAACP,WAAW,IAAIA,WAAW,CAACK,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,EAAE,EAAE;IAClDF,MAAM,CAACG,IAAI,CAAC,iDAAiD,CAAC;EAChE;EAEA,IAAI,CAACN,KAAK,IAAIO,KAAK,CAACP,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC,EAAE;IACxCG,MAAM,CAACG,IAAI,CAAC,iCAAiC,CAAC;EAChD;EAEA,IAAI,CAACL,QAAQ,IAAI,CAACA,QAAQ,CAACO,OAAO,EAAE;IAClCL,MAAM,CAACG,IAAI,CAAC,mCAAmC,CAAC;EAClD;EAEA,IAAIH,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;IACrB,OAAOT,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEP;IAAO,CAAC,CAAC;EACzC;EAEAN,IAAI,CAAC,CAAC;AACR,CAAC;;AAED;AACAb,MAAM,CAAC2B,GAAG,CAAC,SAAS,EAAEvB,sBAAsB,EAAEC,aAAa,CAAC,CAAC,CAAC;;AAE9D;AACAL,MAAM,CAAC2B,GAAG,CAAC,GAAG,EAAEzB,OAAO,EAAEE,sBAAsB,EAAEC,aAAa,CAAC,CAAC,CAAC;AACjEL,MAAM,CAAC2B,GAAG,CAAC,MAAM,EAAEzB,OAAO,EAAEI,YAAY,CAAC;AACzCN,MAAM,CAAC4B,IAAI,CAAC,GAAG,EAAE1B,OAAO,EAAEC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,EAAEO,sBAAsB,EAAEH,eAAe,CAAC;AAC/FP,MAAM,CAAC6B,GAAG,CAAC,MAAM,EAAE3B,OAAO,EAAEQ,sBAAsB,EAAEF,eAAe,CAAC;AACpER,MAAM,CAAC8B,MAAM,CAAC,MAAM,EAAE5B,OAAO,EAAEO,eAAe,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAsB,MAAM,CAACC,OAAO,GAAGhC,MAAM","ignoreList":[]}