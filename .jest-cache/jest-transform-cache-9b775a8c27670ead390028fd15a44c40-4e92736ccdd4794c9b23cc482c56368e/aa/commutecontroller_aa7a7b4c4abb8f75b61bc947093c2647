5bb916d6dd3cf4dcf5d261e98a13410f
const GoogleMapsClient = require('../utils/googleMapsClient');
const Apartment = require('../models/apartment.model');
const mapsClient = new GoogleMapsClient(process.env.GOOGLE_MAPS_API_KEY);

// IMPORTANT: Handles commute time and place details logic
// TODO: Add caching for frequent commute queries

exports.getCommuteTime = async (req, res) => {
  try {
    const {
      apartmentId,
      destination,
      mode = 'driving'
    } = req.body;

    // Get apartment location
    const apartment = await Apartment.findById(apartmentId);
    if (!apartment) {
      return res.status(404).json({
        error: 'Apartment not found'
      });
    }
    const origin = `${apartment.location.coordinates[1]},${apartment.location.coordinates[0]}`;

    // Get commute time
    const commuteInfo = await mapsClient.getCommuteTime(origin, destination, mode);
    res.json({
      success: true,
      data: commuteInfo
    });
  } catch (error) {
    console.error('Error getting commute time:', error);
    res.status(500).json({
      error: 'Error getting commute time',
      details: error.message
    });
  }
};
exports.getMultipleCommuteTimes = async (req, res) => {
  try {
    const {
      apartmentId,
      destinations,
      mode = 'driving'
    } = req.body;

    // Get apartment location
    const apartment = await Apartment.findById(apartmentId);
    if (!apartment) {
      return res.status(404).json({
        error: 'Apartment not found'
      });
    }
    const origin = `${apartment.location.coordinates[1]},${apartment.location.coordinates[0]}`;

    // Get commute times for all destinations
    const commutePromises = destinations.map(destination => mapsClient.getCommuteTime(origin, destination, mode));
    const commuteResults = await Promise.all(commutePromises);
    res.json({
      success: true,
      data: commuteResults
    });
  } catch (error) {
    console.error('Error getting multiple commute times:', error);
    res.status(500).json({
      error: 'Error getting commute times',
      details: error.message
    });
  }
};
exports.getPlaceDetails = async (req, res) => {
  try {
    const {
      placeId
    } = req.params;
    const placeDetails = await mapsClient.getPlaceDetails(placeId);
    res.json({
      success: true,
      data: placeDetails
    });
  } catch (error) {
    console.error('Error getting place details:', error);
    res.status(500).json({
      error: 'Error getting place details',
      details: error.message
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHb29nbGVNYXBzQ2xpZW50IiwicmVxdWlyZSIsIkFwYXJ0bWVudCIsIm1hcHNDbGllbnQiLCJwcm9jZXNzIiwiZW52IiwiR09PR0xFX01BUFNfQVBJX0tFWSIsImV4cG9ydHMiLCJnZXRDb21tdXRlVGltZSIsInJlcSIsInJlcyIsImFwYXJ0bWVudElkIiwiZGVzdGluYXRpb24iLCJtb2RlIiwiYm9keSIsImFwYXJ0bWVudCIsImZpbmRCeUlkIiwic3RhdHVzIiwianNvbiIsImVycm9yIiwib3JpZ2luIiwibG9jYXRpb24iLCJjb29yZGluYXRlcyIsImNvbW11dGVJbmZvIiwic3VjY2VzcyIsImRhdGEiLCJjb25zb2xlIiwiZGV0YWlscyIsIm1lc3NhZ2UiLCJnZXRNdWx0aXBsZUNvbW11dGVUaW1lcyIsImRlc3RpbmF0aW9ucyIsImNvbW11dGVQcm9taXNlcyIsIm1hcCIsImNvbW11dGVSZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsImdldFBsYWNlRGV0YWlscyIsInBsYWNlSWQiLCJwYXJhbXMiLCJwbGFjZURldGFpbHMiXSwic291cmNlcyI6WyJjb21tdXRlLmNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgR29vZ2xlTWFwc0NsaWVudCA9IHJlcXVpcmUoJy4uL3V0aWxzL2dvb2dsZU1hcHNDbGllbnQnKTtcbmNvbnN0IEFwYXJ0bWVudCA9IHJlcXVpcmUoJy4uL21vZGVscy9hcGFydG1lbnQubW9kZWwnKTtcblxuY29uc3QgbWFwc0NsaWVudCA9IG5ldyBHb29nbGVNYXBzQ2xpZW50KHByb2Nlc3MuZW52LkdPT0dMRV9NQVBTX0FQSV9LRVkpO1xuXG4vLyBJTVBPUlRBTlQ6IEhhbmRsZXMgY29tbXV0ZSB0aW1lIGFuZCBwbGFjZSBkZXRhaWxzIGxvZ2ljXG4vLyBUT0RPOiBBZGQgY2FjaGluZyBmb3IgZnJlcXVlbnQgY29tbXV0ZSBxdWVyaWVzXG5cbmV4cG9ydHMuZ2V0Q29tbXV0ZVRpbWUgPSBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGFwYXJ0bWVudElkLCBkZXN0aW5hdGlvbiwgbW9kZSA9ICdkcml2aW5nJyB9ID0gcmVxLmJvZHk7XG5cbiAgICAvLyBHZXQgYXBhcnRtZW50IGxvY2F0aW9uXG4gICAgY29uc3QgYXBhcnRtZW50ID0gYXdhaXQgQXBhcnRtZW50LmZpbmRCeUlkKGFwYXJ0bWVudElkKTtcbiAgICBpZiAoIWFwYXJ0bWVudCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdBcGFydG1lbnQgbm90IGZvdW5kJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBvcmlnaW4gPSBgJHthcGFydG1lbnQubG9jYXRpb24uY29vcmRpbmF0ZXNbMV19LCR7YXBhcnRtZW50LmxvY2F0aW9uLmNvb3JkaW5hdGVzWzBdfWA7XG5cbiAgICAvLyBHZXQgY29tbXV0ZSB0aW1lXG4gICAgY29uc3QgY29tbXV0ZUluZm8gPSBhd2FpdCBtYXBzQ2xpZW50LmdldENvbW11dGVUaW1lKG9yaWdpbiwgZGVzdGluYXRpb24sIG1vZGUpO1xuXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IGNvbW11dGVJbmZvLFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgY29tbXV0ZSB0aW1lOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBlcnJvcjogJ0Vycm9yIGdldHRpbmcgY29tbXV0ZSB0aW1lJyxcbiAgICAgIGRldGFpbHM6IGVycm9yLm1lc3NhZ2UsXG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydHMuZ2V0TXVsdGlwbGVDb21tdXRlVGltZXMgPSBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGFwYXJ0bWVudElkLCBkZXN0aW5hdGlvbnMsIG1vZGUgPSAnZHJpdmluZycgfSA9IHJlcS5ib2R5O1xuXG4gICAgLy8gR2V0IGFwYXJ0bWVudCBsb2NhdGlvblxuICAgIGNvbnN0IGFwYXJ0bWVudCA9IGF3YWl0IEFwYXJ0bWVudC5maW5kQnlJZChhcGFydG1lbnRJZCk7XG4gICAgaWYgKCFhcGFydG1lbnQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnQXBhcnRtZW50IG5vdCBmb3VuZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3JpZ2luID0gYCR7YXBhcnRtZW50LmxvY2F0aW9uLmNvb3JkaW5hdGVzWzFdfSwke2FwYXJ0bWVudC5sb2NhdGlvbi5jb29yZGluYXRlc1swXX1gO1xuXG4gICAgLy8gR2V0IGNvbW11dGUgdGltZXMgZm9yIGFsbCBkZXN0aW5hdGlvbnNcbiAgICBjb25zdCBjb21tdXRlUHJvbWlzZXMgPSBkZXN0aW5hdGlvbnMubWFwKChkZXN0aW5hdGlvbikgPT5cbiAgICAgIG1hcHNDbGllbnQuZ2V0Q29tbXV0ZVRpbWUob3JpZ2luLCBkZXN0aW5hdGlvbiwgbW9kZSlcbiAgICApO1xuXG4gICAgY29uc3QgY29tbXV0ZVJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChjb21tdXRlUHJvbWlzZXMpO1xuXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IGNvbW11dGVSZXN1bHRzLFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgbXVsdGlwbGUgY29tbXV0ZSB0aW1lczonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgZXJyb3I6ICdFcnJvciBnZXR0aW5nIGNvbW11dGUgdGltZXMnLFxuICAgICAgZGV0YWlsczogZXJyb3IubWVzc2FnZSxcbiAgICB9KTtcbiAgfVxufTtcblxuZXhwb3J0cy5nZXRQbGFjZURldGFpbHMgPSBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHBsYWNlSWQgfSA9IHJlcS5wYXJhbXM7XG5cbiAgICBjb25zdCBwbGFjZURldGFpbHMgPSBhd2FpdCBtYXBzQ2xpZW50LmdldFBsYWNlRGV0YWlscyhwbGFjZUlkKTtcblxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiBwbGFjZURldGFpbHMsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBwbGFjZSBkZXRhaWxzOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBlcnJvcjogJ0Vycm9yIGdldHRpbmcgcGxhY2UgZGV0YWlscycsXG4gICAgICBkZXRhaWxzOiBlcnJvci5tZXNzYWdlLFxuICAgIH0pO1xuICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxnQkFBZ0IsR0FBR0MsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQzdELE1BQU1DLFNBQVMsR0FBR0QsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBRXRELE1BQU1FLFVBQVUsR0FBRyxJQUFJSCxnQkFBZ0IsQ0FBQ0ksT0FBTyxDQUFDQyxHQUFHLENBQUNDLG1CQUFtQixDQUFDOztBQUV4RTtBQUNBOztBQUVBQyxPQUFPLENBQUNDLGNBQWMsR0FBRyxPQUFPQyxHQUFHLEVBQUVDLEdBQUcsS0FBSztFQUMzQyxJQUFJO0lBQ0YsTUFBTTtNQUFFQyxXQUFXO01BQUVDLFdBQVc7TUFBRUMsSUFBSSxHQUFHO0lBQVUsQ0FBQyxHQUFHSixHQUFHLENBQUNLLElBQUk7O0lBRS9EO0lBQ0EsTUFBTUMsU0FBUyxHQUFHLE1BQU1iLFNBQVMsQ0FBQ2MsUUFBUSxDQUFDTCxXQUFXLENBQUM7SUFDdkQsSUFBSSxDQUFDSSxTQUFTLEVBQUU7TUFDZCxPQUFPTCxHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO1FBQUVDLEtBQUssRUFBRTtNQUFzQixDQUFDLENBQUM7SUFDL0Q7SUFFQSxNQUFNQyxNQUFNLEdBQUcsR0FBR0wsU0FBUyxDQUFDTSxRQUFRLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSVAsU0FBUyxDQUFDTSxRQUFRLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTs7SUFFMUY7SUFDQSxNQUFNQyxXQUFXLEdBQUcsTUFBTXBCLFVBQVUsQ0FBQ0ssY0FBYyxDQUFDWSxNQUFNLEVBQUVSLFdBQVcsRUFBRUMsSUFBSSxDQUFDO0lBRTlFSCxHQUFHLENBQUNRLElBQUksQ0FBQztNQUNQTSxPQUFPLEVBQUUsSUFBSTtNQUNiQyxJQUFJLEVBQUVGO0lBQ1IsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU9KLEtBQUssRUFBRTtJQUNkTyxPQUFPLENBQUNQLEtBQUssQ0FBQyw2QkFBNkIsRUFBRUEsS0FBSyxDQUFDO0lBQ25EVCxHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ25CQyxLQUFLLEVBQUUsNEJBQTRCO01BQ25DUSxPQUFPLEVBQUVSLEtBQUssQ0FBQ1M7SUFDakIsQ0FBQyxDQUFDO0VBQ0o7QUFDRixDQUFDO0FBRURyQixPQUFPLENBQUNzQix1QkFBdUIsR0FBRyxPQUFPcEIsR0FBRyxFQUFFQyxHQUFHLEtBQUs7RUFDcEQsSUFBSTtJQUNGLE1BQU07TUFBRUMsV0FBVztNQUFFbUIsWUFBWTtNQUFFakIsSUFBSSxHQUFHO0lBQVUsQ0FBQyxHQUFHSixHQUFHLENBQUNLLElBQUk7O0lBRWhFO0lBQ0EsTUFBTUMsU0FBUyxHQUFHLE1BQU1iLFNBQVMsQ0FBQ2MsUUFBUSxDQUFDTCxXQUFXLENBQUM7SUFDdkQsSUFBSSxDQUFDSSxTQUFTLEVBQUU7TUFDZCxPQUFPTCxHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO1FBQUVDLEtBQUssRUFBRTtNQUFzQixDQUFDLENBQUM7SUFDL0Q7SUFFQSxNQUFNQyxNQUFNLEdBQUcsR0FBR0wsU0FBUyxDQUFDTSxRQUFRLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSVAsU0FBUyxDQUFDTSxRQUFRLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTs7SUFFMUY7SUFDQSxNQUFNUyxlQUFlLEdBQUdELFlBQVksQ0FBQ0UsR0FBRyxDQUFFcEIsV0FBVyxJQUNuRFQsVUFBVSxDQUFDSyxjQUFjLENBQUNZLE1BQU0sRUFBRVIsV0FBVyxFQUFFQyxJQUFJLENBQ3JELENBQUM7SUFFRCxNQUFNb0IsY0FBYyxHQUFHLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSixlQUFlLENBQUM7SUFFekRyQixHQUFHLENBQUNRLElBQUksQ0FBQztNQUNQTSxPQUFPLEVBQUUsSUFBSTtNQUNiQyxJQUFJLEVBQUVRO0lBQ1IsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU9kLEtBQUssRUFBRTtJQUNkTyxPQUFPLENBQUNQLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRUEsS0FBSyxDQUFDO0lBQzdEVCxHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ25CQyxLQUFLLEVBQUUsNkJBQTZCO01BQ3BDUSxPQUFPLEVBQUVSLEtBQUssQ0FBQ1M7SUFDakIsQ0FBQyxDQUFDO0VBQ0o7QUFDRixDQUFDO0FBRURyQixPQUFPLENBQUM2QixlQUFlLEdBQUcsT0FBTzNCLEdBQUcsRUFBRUMsR0FBRyxLQUFLO0VBQzVDLElBQUk7SUFDRixNQUFNO01BQUUyQjtJQUFRLENBQUMsR0FBRzVCLEdBQUcsQ0FBQzZCLE1BQU07SUFFOUIsTUFBTUMsWUFBWSxHQUFHLE1BQU1wQyxVQUFVLENBQUNpQyxlQUFlLENBQUNDLE9BQU8sQ0FBQztJQUU5RDNCLEdBQUcsQ0FBQ1EsSUFBSSxDQUFDO01BQ1BNLE9BQU8sRUFBRSxJQUFJO01BQ2JDLElBQUksRUFBRWM7SUFDUixDQUFDLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT3BCLEtBQUssRUFBRTtJQUNkTyxPQUFPLENBQUNQLEtBQUssQ0FBQyw4QkFBOEIsRUFBRUEsS0FBSyxDQUFDO0lBQ3BEVCxHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ25CQyxLQUFLLEVBQUUsNkJBQTZCO01BQ3BDUSxPQUFPLEVBQUVSLEtBQUssQ0FBQ1M7SUFDakIsQ0FBQyxDQUFDO0VBQ0o7QUFDRixDQUFDIiwiaWdub3JlTGlzdCI6W119