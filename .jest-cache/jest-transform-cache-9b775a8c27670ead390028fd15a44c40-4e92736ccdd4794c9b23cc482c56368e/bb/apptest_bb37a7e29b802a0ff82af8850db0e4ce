9eae502383a0697f334ce4acc112b67c
const request = require('supertest');
const mongoose = require('mongoose');
const app = require('../app');
const User = require('../models/user.model');
const Apartment = require('../models/apartment.model');
let testUser;
beforeAll(async () => {
  // Create a test user
  testUser = await User.create({
    email: 'testuser@example.com',
    password: 'password123',
    name: 'Test User'
  });
}, 20000);
beforeEach(async () => {
  // Clear apartments before each test
  await Apartment.deleteMany();
});
afterEach(async () => {
  await User.deleteMany();
  await Apartment.deleteMany();
});
describe('App', () => {
  it('should return 404 for unknown routes', async () => {
    const response = await request(app).get('/unknown-route').expect(404);
    expect(response.body).toEqual({
      error: "Sorry, can't find that"
    });
  });
  it('should return 200 and a list of apartments for /api/apartments', async () => {
    // Create a test apartment
    await Apartment.create({
      title: 'Test Apartment',
      description: 'A nice place',
      price: 1000,
      location: {
        type: 'Point',
        coordinates: [0, 0],
        address: {
          street: '123 Main St',
          city: 'Testville',
          state: 'TS',
          zipCode: '12345',
          country: 'Testland'
        }
      },
      bedrooms: 2,
      bathrooms: 1,
      area: 50,
      amenities: ['WiFi'],
      images: [],
      owner: testUser._id,
      status: 'available'
    });
    const response = await request(app).get('/api/apartments').expect(200);
    expect(response.body).toHaveProperty('apartments');
    expect(Array.isArray(response.body.apartments)).toBe(true);
    expect(response.body.apartments.length).toBeGreaterThan(0);
  }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsIm1vbmdvb3NlIiwiYXBwIiwiVXNlciIsIkFwYXJ0bWVudCIsInRlc3RVc2VyIiwiYmVmb3JlQWxsIiwiY3JlYXRlIiwiZW1haWwiLCJwYXNzd29yZCIsIm5hbWUiLCJiZWZvcmVFYWNoIiwiZGVsZXRlTWFueSIsImFmdGVyRWFjaCIsImRlc2NyaWJlIiwiaXQiLCJyZXNwb25zZSIsImdldCIsImV4cGVjdCIsImJvZHkiLCJ0b0VxdWFsIiwiZXJyb3IiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwicHJpY2UiLCJsb2NhdGlvbiIsInR5cGUiLCJjb29yZGluYXRlcyIsImFkZHJlc3MiLCJzdHJlZXQiLCJjaXR5Iiwic3RhdGUiLCJ6aXBDb2RlIiwiY291bnRyeSIsImJlZHJvb21zIiwiYmF0aHJvb21zIiwiYXJlYSIsImFtZW5pdGllcyIsImltYWdlcyIsIm93bmVyIiwiX2lkIiwic3RhdHVzIiwidG9IYXZlUHJvcGVydHkiLCJBcnJheSIsImlzQXJyYXkiLCJhcGFydG1lbnRzIiwidG9CZSIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiJdLCJzb3VyY2VzIjpbImFwcC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCdzdXBlcnRlc3QnKTtcclxuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5jb25zdCBhcHAgPSByZXF1aXJlKCcuLi9hcHAnKTtcclxuY29uc3QgVXNlciA9IHJlcXVpcmUoJy4uL21vZGVscy91c2VyLm1vZGVsJyk7XHJcbmNvbnN0IEFwYXJ0bWVudCA9IHJlcXVpcmUoJy4uL21vZGVscy9hcGFydG1lbnQubW9kZWwnKTtcclxuXHJcbmxldCB0ZXN0VXNlcjtcclxuXHJcbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XHJcbiAgLy8gQ3JlYXRlIGEgdGVzdCB1c2VyXHJcbiAgdGVzdFVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZSh7XHJcbiAgICBlbWFpbDogJ3Rlc3R1c2VyQGV4YW1wbGUuY29tJyxcclxuICAgIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxyXG4gICAgbmFtZTogJ1Rlc3QgVXNlcicsXHJcbiAgfSk7XHJcbn0sIDIwMDAwKTtcclxuXHJcbmJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xyXG4gIC8vIENsZWFyIGFwYXJ0bWVudHMgYmVmb3JlIGVhY2ggdGVzdFxyXG4gIGF3YWl0IEFwYXJ0bWVudC5kZWxldGVNYW55KCk7XHJcbn0pO1xyXG5cclxuYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcclxuICBhd2FpdCBVc2VyLmRlbGV0ZU1hbnkoKTtcclxuICBhd2FpdCBBcGFydG1lbnQuZGVsZXRlTWFueSgpO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdBcHAnLCAoKSA9PiB7XHJcbiAgaXQoJ3Nob3VsZCByZXR1cm4gNDA0IGZvciB1bmtub3duIHJvdXRlcycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApLmdldCgnL3Vua25vd24tcm91dGUnKS5leHBlY3QoNDA0KTtcclxuXHJcbiAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9FcXVhbCh7XHJcbiAgICAgIGVycm9yOiBcIlNvcnJ5LCBjYW4ndCBmaW5kIHRoYXRcIixcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHJldHVybiAyMDAgYW5kIGEgbGlzdCBvZiBhcGFydG1lbnRzIGZvciAvYXBpL2FwYXJ0bWVudHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBDcmVhdGUgYSB0ZXN0IGFwYXJ0bWVudFxyXG4gICAgYXdhaXQgQXBhcnRtZW50LmNyZWF0ZSh7XHJcbiAgICAgIHRpdGxlOiAnVGVzdCBBcGFydG1lbnQnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0EgbmljZSBwbGFjZScsXHJcbiAgICAgIHByaWNlOiAxMDAwLFxyXG4gICAgICBsb2NhdGlvbjoge1xyXG4gICAgICAgIHR5cGU6ICdQb2ludCcsXHJcbiAgICAgICAgY29vcmRpbmF0ZXM6IFswLCAwXSxcclxuICAgICAgICBhZGRyZXNzOiB7XHJcbiAgICAgICAgICBzdHJlZXQ6ICcxMjMgTWFpbiBTdCcsXHJcbiAgICAgICAgICBjaXR5OiAnVGVzdHZpbGxlJyxcclxuICAgICAgICAgIHN0YXRlOiAnVFMnLFxyXG4gICAgICAgICAgemlwQ29kZTogJzEyMzQ1JyxcclxuICAgICAgICAgIGNvdW50cnk6ICdUZXN0bGFuZCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICAgYmVkcm9vbXM6IDIsXHJcbiAgICAgIGJhdGhyb29tczogMSxcclxuICAgICAgYXJlYTogNTAsXHJcbiAgICAgIGFtZW5pdGllczogWydXaUZpJ10sXHJcbiAgICAgIGltYWdlczogW10sXHJcbiAgICAgIG93bmVyOiB0ZXN0VXNlci5faWQsXHJcbiAgICAgIHN0YXR1czogJ2F2YWlsYWJsZScsXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoJy9hcGkvYXBhcnRtZW50cycpLmV4cGVjdCgyMDApO1xyXG4gICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdhcGFydG1lbnRzJyk7XHJcbiAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXNwb25zZS5ib2R5LmFwYXJ0bWVudHMpKS50b0JlKHRydWUpO1xyXG4gICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuYXBhcnRtZW50cy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcclxuICB9LCAxMDAwMCk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNwQyxNQUFNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDcEMsTUFBTUUsR0FBRyxHQUFHRixPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzdCLE1BQU1HLElBQUksR0FB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