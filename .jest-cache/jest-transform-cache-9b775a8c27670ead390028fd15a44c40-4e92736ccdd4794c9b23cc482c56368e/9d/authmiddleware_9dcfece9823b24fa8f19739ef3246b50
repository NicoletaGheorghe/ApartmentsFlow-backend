e369a6f12133c05f9688c3198d3b6ea5
const jwt = require('jsonwebtoken');
const User = require('../models/user.model');
const protect = async (req, res, next) => {
  try {
    let token;
    if (req.headers.authorization?.startsWith('Bearer')) {
      token = req.headers.authorization.split(' ')[1];
    }
    if (!token) {
      return res.status(401).json({
        error: 'Not authorized to access this route'
      });
    }
    try {
      // Verify token
      const decoded = jwt.verify(token, process.env.JWT_SECRET);

      // Get user from token
      const user = await User.findById(decoded.id).select('-password');
      if (!user) {
        return res.status(401).json({
          error: 'User not found'
        });
      }

      // Attach the full user object to the request
      req.user = user;
      next();
    } catch (error) {
      console.error('Token verification error:', error);
      return res.status(401).json({
        error: 'Not authorized to access this route'
      });
    }
  } catch (error) {
    next(error);
  }
};
const authorize = (...roles) => {
  return (req, res, next) => {
    if (!req.user || !roles.includes(req.user.role)) {
      return res.status(403).json({
        error: `User role ${req.user?.role || 'none'} is not authorized to access this route`
      });
    }
    next();
  };
};
module.exports = {
  protect,
  authorize
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqd3QiLCJyZXF1aXJlIiwiVXNlciIsInByb3RlY3QiLCJyZXEiLCJyZXMiLCJuZXh0IiwidG9rZW4iLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsInN0YXJ0c1dpdGgiLCJzcGxpdCIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsImRlY29kZWQiLCJ2ZXJpZnkiLCJwcm9jZXNzIiwiZW52IiwiSldUX1NFQ1JFVCIsInVzZXIiLCJmaW5kQnlJZCIsImlkIiwic2VsZWN0IiwiY29uc29sZSIsImF1dGhvcml6ZSIsInJvbGVzIiwiaW5jbHVkZXMiLCJyb2xlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImF1dGgubWlkZGxld2FyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcbmNvbnN0IFVzZXIgPSByZXF1aXJlKCcuLi9tb2RlbHMvdXNlci5tb2RlbCcpO1xuXG5jb25zdCBwcm90ZWN0ID0gYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgbGV0IHRva2VuO1xuXG4gICAgaWYgKHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24/LnN0YXJ0c1dpdGgoJ0JlYXJlcicpKSB7XG4gICAgICB0b2tlbiA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24uc3BsaXQoJyAnKVsxXTtcbiAgICB9XG5cbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ05vdCBhdXRob3JpemVkIHRvIGFjY2VzcyB0aGlzIHJvdXRlJyB9KTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgLy8gVmVyaWZ5IHRva2VuXG4gICAgICBjb25zdCBkZWNvZGVkID0gand0LnZlcmlmeSh0b2tlbiwgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCk7XG5cbiAgICAgIC8vIEdldCB1c2VyIGZyb20gdG9rZW5cbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeUlkKGRlY29kZWQuaWQpLnNlbGVjdCgnLXBhc3N3b3JkJyk7XG5cbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ1VzZXIgbm90IGZvdW5kJyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQXR0YWNoIHRoZSBmdWxsIHVzZXIgb2JqZWN0IHRvIHRoZSByZXF1ZXN0XG4gICAgICByZXEudXNlciA9IHVzZXI7XG4gICAgICBuZXh0KCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1Rva2VuIHZlcmlmaWNhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ05vdCBhdXRob3JpemVkIHRvIGFjY2VzcyB0aGlzIHJvdXRlJyB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbmV4dChlcnJvcik7XG4gIH1cbn07XG5cbmNvbnN0IGF1dGhvcml6ZSA9ICguLi5yb2xlcykgPT4ge1xuICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgaWYgKCFyZXEudXNlciB8fCAhcm9sZXMuaW5jbHVkZXMocmVxLnVzZXIucm9sZSkpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG4gICAgICAgIGVycm9yOiBgVXNlciByb2xlICR7cmVxLnVzZXI/LnJvbGUgfHwgJ25vbmUnfSBpcyBub3QgYXV0aG9yaXplZCB0byBhY2Nlc3MgdGhpcyByb3V0ZWAsXG4gICAgICB9KTtcbiAgICB9XG4gICAgbmV4dCgpO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHByb3RlY3QsXG4gIGF1dGhvcml6ZSxcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEdBQUcsR0FBR0MsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUNuQyxNQUFNQyxJQUFJLEdBQUdE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