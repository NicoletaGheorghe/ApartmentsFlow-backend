e5741fbea14b249d9e472a43c5e7a270
const mongoose = require('mongoose');
const apartmentSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
    trim: true
  },
  description: {
    type: String,
    required: true
  },
  price: {
    type: Number,
    required: true,
    min: 0
  },
  location: {
    type: {
      type: String,
      enum: ['Point'],
      default: 'Point'
    },
    coordinates: {
      type: [Number],
      required: true
    },
    address: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    }
  },
  bedrooms: {
    type: Number,
    required: true,
    min: 0
  },
  bathrooms: {
    type: Number,
    required: true,
    min: 0
  },
  area: {
    type: Number,
    required: true,
    min: 0
  },
  amenities: [{
    type: String
  }],
  images: [{
    type: String
  }],
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  status: {
    type: String,
    enum: ['available', 'rented', 'pending'],
    default: 'available'
  },
  isPublic: {
    type: Boolean,
    default: true
  },
  externalUrl: {
    type: String,
    trim: true
  }
}, {
  timestamps: true
});

// Create geospatial index for location queries
apartmentSchema.index({
  location: '2dsphere'
});

// Add indexes for the title, price, status, and isPublic fields
apartmentSchema.index({
  title: 1
});
apartmentSchema.index({
  price: 1
});
apartmentSchema.index({
  status: 1
});
apartmentSchema.index({
  isPublic: 1
});
const Apartment = mongoose.model('Apartment', apartmentSchema);
module.exports = Apartment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJhcGFydG1lbnRTY2hlbWEiLCJTY2hlbWEiLCJ0aXRsZSIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsInRyaW0iLCJkZXNjcmlwdGlvbiIsInByaWNlIiwiTnVtYmVyIiwibWluIiwibG9jYXRpb24iLCJlbnVtIiwiZGVmYXVsdCIsImNvb3JkaW5hdGVzIiwiYWRkcmVzcyIsInN0cmVldCIsImNpdHkiLCJzdGF0ZSIsInppcENvZGUiLCJjb3VudHJ5IiwiYmVkcm9vbXMiLCJiYXRocm9vbXMiLCJhcmVhIiwiYW1lbml0aWVzIiwiaW1hZ2VzIiwib3duZXIiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwic3RhdHVzIiwiaXNQdWJsaWMiLCJCb29sZWFuIiwiZXh0ZXJuYWxVcmwiLCJ0aW1lc3RhbXBzIiwiaW5kZXgiLCJBcGFydG1lbnQiLCJtb2RlbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJhcGFydG1lbnQubW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuXG5jb25zdCBhcGFydG1lbnRTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKFxuICB7XG4gICAgdGl0bGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgdHJpbTogdHJ1ZSxcbiAgICB9LFxuICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHByaWNlOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIG1pbjogMCxcbiAgICB9LFxuICAgIGxvY2F0aW9uOiB7XG4gICAgICB0eXBlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZW51bTogWydQb2ludCddLFxuICAgICAgICBkZWZhdWx0OiAnUG9pbnQnLFxuICAgICAgfSxcbiAgICAgIGNvb3JkaW5hdGVzOiB7XG4gICAgICAgIHR5cGU6IFtOdW1iZXJdLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBhZGRyZXNzOiB7XG4gICAgICAgIHN0cmVldDogU3RyaW5nLFxuICAgICAgICBjaXR5OiBTdHJpbmcsXG4gICAgICAgIHN0YXRlOiBTdHJpbmcsXG4gICAgICAgIHppcENvZGU6IFN0cmluZyxcbiAgICAgICAgY291bnRyeTogU3RyaW5nLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGJlZHJvb21zOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIG1pbjogMCxcbiAgICB9LFxuICAgIGJhdGhyb29tczoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBtaW46IDAsXG4gICAgfSxcbiAgICBhcmVhOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIG1pbjogMCxcbiAgICB9LFxuICAgIGFtZW5pdGllczogW1xuICAgICAge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB9LFxuICAgIF0sXG4gICAgaW1hZ2VzOiBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBvd25lcjoge1xuICAgICAgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLFxuICAgICAgcmVmOiAnVXNlcicsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHN0YXR1czoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZW51bTogWydhdmFpbGFibGUnLCAncmVudGVkJywgJ3BlbmRpbmcnXSxcbiAgICAgIGRlZmF1bHQ6ICdhdmFpbGFibGUnLFxuICAgIH0sXG4gICAgaXNQdWJsaWM6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0sXG4gICAgZXh0ZXJuYWxVcmw6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHRyaW06IHRydWUsXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIHRpbWVzdGFtcHM6IHRydWUsXG4gIH1cbik7XG5cbi8vIENyZWF0ZSBnZW9zcGF0aWFsIGluZGV4IGZvciBsb2NhdGlvbiBxdWVyaWVzXG5hcGFydG1lbnRTY2hlbWEuaW5kZXgoeyBsb2NhdGlvbjogJzJkc3BoZXJlJyB9KTtcblxuLy8gQWRkIGluZGV4ZXMgZm9yIHRoZSB0aXRsZSwgcHJpY2UsIHN0YXR1cywgYW5kIGlzUHVibGljIGZpZWxkc1xuYXBhcnRtZW50U2NoZW1hLmluZGV4KHsgdGl0bGU6IDEgfSk7XG5hcGFydG1lbnRTY2hlbWEuaW5kZXgoeyBwcmljZTogMSB9KTtcbmFwYXJ0bWVudFNjaGVtYS5pbmRleCh7IHN0YXR1czogMSB9KTtcbmFwYXJ0bWVudFNjaGVtYS5pbmRleCh7IGlzUHVibGljOiAxIH0pO1xuXG5jb25zdCBBcGFydG1lbnQgPSBtb25nb29zZS5tb2RlbCgnQXBhcnRtZW50JywgYXBhcnRtZW50U2NoZW1hKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcGFydG1lbnQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUVwQyxNQUFNQyxlQUFlLEdBQUcsSUFBSUYsUUFBUSxDQUFDRyxNQUFNLENBQ3pDO0VBQ0VDLEtBQUssRUFBRTtJQUNMQyxJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLElBQUk7SUFDZEMsSUFBSSxFQUFFO0VBQ1IsQ0FBQztFQUNEQyxXQUFXLEVBQUU7SUFDWEosSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFDREcsS0FBSyxFQUFFO0lBQ0xMLElBQUksRUFBRU0sTUFBTTtJQUNaSixRQUFRLEVB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