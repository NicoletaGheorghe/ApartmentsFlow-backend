472dd21870a283c7a41f1f751d0747c5
const express = require('express');
const router = express.Router();
const {
  protect
} = require('../middleware/auth.middleware');
const User = require('../models/user.model');
const Apartment = require('../models/apartment.model');

// GET /api/favorites - Get user's favorite apartments
router.get('/', protect, async (req, res) => {
  try {
    const user = await User.findById(req.user._id).populate('favorites');
    res.json({
      favorites: user.favorites
    });
  } catch (error) {
    res.status(500).json({
      error: 'Error fetching favorites'
    });
  }
});

// POST /api/favorites - Add apartment to favorites
router.post('/', protect, async (req, res) => {
  try {
    const {
      apartmentId
    } = req.body;

    // Check if apartment exists
    const apartment = await Apartment.findById(apartmentId);
    if (!apartment) {
      return res.status(404).json({
        error: 'Apartment not found'
      });
    }

    // Add to favorites if not already there
    const user = await User.findById(req.user._id);
    if (!user.favorites.includes(apartmentId)) {
      user.favorites.push(apartmentId);
      await user.save();
    }
    res.json({
      message: 'Added to favorites'
    });
  } catch (error) {
    res.status(500).json({
      error: 'Error adding to favorites'
    });
  }
});

// DELETE /api/favorites/:id - Remove apartment from favorites
router.delete('/:id', protect, async (req, res) => {
  try {
    const user = await User.findById(req.user._id);
    user.favorites = user.favorites.filter(id => id.toString() !== req.params.id);
    await user.save();
    res.json({
      message: 'Removed from favorites'
    });
  } catch (error) {
    res.status(500).json({
      error: 'Error removing from favorites'
    });
  }
});
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsInJvdXRlciIsIlJvdXRlciIsInByb3RlY3QiLCJVc2VyIiwiQXBhcnRtZW50IiwiZ2V0IiwicmVxIiwicmVzIiwidXNlciIsImZpbmRCeUlkIiwiX2lkIiwicG9wdWxhdGUiLCJqc29uIiwiZmF2b3JpdGVzIiwiZXJyb3IiLCJzdGF0dXMiLCJwb3N0IiwiYXBhcnRtZW50SWQiLCJib2R5IiwiYXBhcnRtZW50IiwiaW5jbHVkZXMiLCJwdXNoIiwic2F2ZSIsIm1lc3NhZ2UiLCJkZWxldGUiLCJmaWx0ZXIiLCJpZCIsInRvU3RyaW5nIiwicGFyYW1zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImZhdm9yaXRlLnJvdXRlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xyXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xyXG5jb25zdCB7IHByb3RlY3QgfSA9IHJlcXVpcmUoJy4uL21pZGRsZXdhcmUvYXV0aC5taWRkbGV3YXJlJyk7XHJcbmNvbnN0IFVzZXIgPSByZXF1aXJlKCcuLi9tb2RlbHMvdXNlci5tb2RlbCcpO1xyXG5jb25zdCBBcGFydG1lbnQgPSByZXF1aXJlKCcuLi9tb2RlbHMvYXBhcnRtZW50Lm1vZGVsJyk7XHJcblxyXG4vLyBHRVQgL2FwaS9mYXZvcml0ZXMgLSBHZXQgdXNlcidzIGZhdm9yaXRlIGFwYXJ0bWVudHNcclxucm91dGVyLmdldCgnLycsIHByb3RlY3QsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kQnlJZChyZXEudXNlci5faWQpLnBvcHVsYXRlKCdmYXZvcml0ZXMnKTtcclxuICAgIHJlcy5qc29uKHsgZmF2b3JpdGVzOiB1c2VyLmZhdm9yaXRlcyB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0Vycm9yIGZldGNoaW5nIGZhdm9yaXRlcycgfSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbi8vIFBPU1QgL2FwaS9mYXZvcml0ZXMgLSBBZGQgYXBhcnRtZW50IHRvIGZhdm9yaXRlc1xyXG5yb3V0ZXIucG9zdCgnLycsIHByb3RlY3QsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IGFwYXJ0bWVudElkIH0gPSByZXEuYm9keTtcclxuXHJcbiAgICAvLyBDaGVjayBpZiBhcGFydG1lbnQgZXhpc3RzXHJcbiAgICBjb25zdCBhcGFydG1lbnQgPSBhd2FpdCBBcGFydG1lbnQuZmluZEJ5SWQoYXBhcnRtZW50SWQpO1xyXG4gICAgaWYgKCFhcGFydG1lbnQpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdBcGFydG1lbnQgbm90IGZvdW5kJyB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgdG8gZmF2b3JpdGVzIGlmIG5vdCBhbHJlYWR5IHRoZXJlXHJcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kQnlJZChyZXEudXNlci5faWQpO1xyXG4gICAgaWYgKCF1c2VyLmZhdm9yaXRlcy5pbmNsdWRlcyhhcGFydG1lbnRJZCkpIHtcclxuICAgICAgdXNlci5mYXZvcml0ZXMucHVzaChhcGFydG1lbnRJZCk7XHJcbiAgICAgIGF3YWl0IHVzZXIuc2F2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcy5qc29uKHsgbWVzc2FnZTogJ0FkZGVkIHRvIGZhdm9yaXRlcycgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciBhZGRpbmcgdG8gZmF2b3JpdGVzJyB9KTtcclxuICB9XHJcbn0pO1xyXG5cclxuLy8gREVMRVRFIC9hcGkvZmF2b3JpdGVzLzppZCAtIFJlbW92ZSBhcGFydG1lbnQgZnJvbSBmYXZvcml0ZXNcclxucm91dGVyLmRlbGV0ZSgnLzppZCcsIHByb3RlY3QsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kQnlJZChyZXEudXNlci5faWQpO1xyXG4gICAgdXNlci5mYXZvcml0ZXMgPSB1c2VyLmZhdm9yaXRlcy5maWx0ZXIoKGlkKSA9PiBpZC50b1N0cmluZygpICE9PSByZXEucGFyYW1zLmlkKTtcclxuICAgIGF3YWl0IHVzZXIuc2F2ZSgpO1xyXG4gICAgcmVzLmpzb24oeyBtZXNzYWdlOiAnUmVtb3ZlZCBmcm9tIGZhdm9yaXRlcycgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciByZW1vdmluZyBmcm9tIGZhdm9yaXRlcycgfSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxNQUFNQyxNQUFNLEdBQUdGLE9BQU8sQ0FBQ0csTUFBTSxDQUFDLENBQUM7QUFDL0IsTUFBTTtFQUFFQztBQUFRLENBQUMsR0FBR0gsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBQzVELE1BQU1JLElBQUksR0FBR0osT0FBTyxDQUFDLHNCQUFzQixDQUFDO0FBQzVDLE1BQU1LLFNBQVMsR0FBR0wsT0FBTyxDQUFDLDJCQUEyQixDQUFDOztBQUV0RDtBQUNBQyxNQUFNLENBQUNLLEdBQUcsQ0FBQyxHQUFHLEVBQUVILE9BQU8sRUFBRSxPQUFPSSxHQUFHLEVBQUVDLEdBQUcsS0FBSztFQUMzQyxJQUFJO0lBQ0YsTUFBTUMsSUFBSSxHQUFHLE1BQU1MLElBQUksQ0FBQ00sUUFBUSxDQUFDSCxHQUFHLENBQUNFLElBQUksQ0FBQ0UsR0FBRyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxXQUFXLENBQUM7SUFD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