{"version":3,"names":["express","require","router","Router","register","login","getMe","logout","protect","body","post","isString","trim","notEmpty","withMessage","isEmail","isLength","min","get","module","exports"],"sources":["auth.routes.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst { register, login, getMe, logout } = require('../controllers/auth.controller');\r\nconst { protect } = require('../middleware/auth.middleware');\r\nconst { body } = require('express-validator');\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     User:\r\n *       type: object\r\n *       required:\r\n *         - email\r\n *         - password\r\n *         - firstName\r\n *         - lastName\r\n *       properties:\r\n *         email:\r\n *           type: string\r\n *           format: email\r\n *           description: User's email address\r\n *         password:\r\n *           type: string\r\n *           format: password\r\n *           description: User's password\r\n *         firstName:\r\n *           type: string\r\n *           description: User's first name\r\n *         lastName:\r\n *           type: string\r\n *           description: User's last name\r\n *     AuthResponse:\r\n *       type: object\r\n *       properties:\r\n *         token:\r\n *           type: string\r\n *           description: JWT token for authentication\r\n *         user:\r\n *           $ref: '#/components/schemas/User'\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /api/auth/register:\r\n *   post:\r\n *     summary: Register a new user\r\n *     tags: [Auth]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/User'\r\n *     responses:\r\n *       201:\r\n *         description: User successfully registered\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/AuthResponse'\r\n *       400:\r\n *         description: Invalid input data\r\n *       409:\r\n *         description: Email already exists\r\n */\r\nrouter.post('/register', [\r\n  body('name').isString().trim().notEmpty().withMessage('Name is required'),\r\n  body('email').isEmail().withMessage('Valid email is required'),\r\n  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters'),\r\n], register);\r\n\r\n/**\r\n * @swagger\r\n * /api/auth/login:\r\n *   post:\r\n *     summary: Login user\r\n *     tags: [Auth]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - email\r\n *               - password\r\n *             properties:\r\n *               email:\r\n *                 type: string\r\n *                 format: email\r\n *               password:\r\n *                 type: string\r\n *                 format: password\r\n *     responses:\r\n *       200:\r\n *         description: Login successful\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/AuthResponse'\r\n *       401:\r\n *         description: Invalid credentials\r\n */\r\nrouter.post('/login', [\r\n  body('email').isEmail().withMessage('Valid email is required'),\r\n  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters'),\r\n], login);\r\n\r\n/**\r\n * @swagger\r\n * /api/auth/logout:\r\n *   post:\r\n *     summary: Logout user\r\n *     tags: [Auth]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Successfully logged out\r\n *       401:\r\n *         description: Not authenticated\r\n */\r\nrouter.post('/logout', logout);\r\n\r\n/**\r\n * @swagger\r\n * /api/auth/me:\r\n *   get:\r\n *     summary: Get current user profile\r\n *     tags: [Auth]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: User profile retrieved successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/User'\r\n *       401:\r\n *         description: Not authenticated\r\n */\r\nrouter.get('/me', protect, getMe);\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAM;EAAEC,QAAQ;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAO,CAAC,GAAGN,OAAO,CAAC,gCAAgC,CAAC;AACpF,MAAM;EAAEO;AAAQ,CAAC,GAAGP,OAAO,CAAC,+BAA+B,CAAC;AAC5D,MAAM;EAAEQ;AAAK,CAAC,GAAGR,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACQ,IAAI,CAAC,WAAW,EAAE,CACvBD,IAAI,CAAC,MAAM,CAAC,CAACE,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,WAAW,CAAC,kBAAkB,CAAC,EACzEL,IAAI,CAAC,OAAO,CAAC,CAACM,OAAO,CAAC,CAAC,CAACD,WAAW,CAAC,yBAAyB,CAAC,EAC9DL,IAAI,CAAC,UAAU,CAAC,CAACO,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CAACH,WAAW,CAAC,wCAAwC,CAAC,CAC5F,EAAEV,QAAQ,CAAC;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,MAAM,CAACQ,IAAI,CAAC,QAAQ,EAAE,CACpBD,IAAI,CAAC,OAAO,CAAC,CAACM,OAAO,CAAC,CAAC,CAACD,WAAW,CAAC,yBAAyB,CAAC,EAC9DL,IAAI,CAAC,UAAU,CAAC,CAACO,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CAACH,WAAW,CAAC,wCAAwC,CAAC,CAC5F,EAAET,KAAK,CAAC;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,MAAM,CAACQ,IAAI,CAAC,SAAS,EAAEH,MAAM,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,MAAM,CAACgB,GAAG,CAAC,KAAK,EAAEV,OAAO,EAAEF,KAAK,CAAC;AAEjCa,MAAM,CAACC,OAAO,GAAGlB,MAAM","ignoreList":[]}