f2229319bc5102ad7abfa7b1b63250d4
const axios = require('axios');

// Utility for interacting with the Google Maps API (directions, geocode, place details)
// IMPORTANT: Used by commute controller for all Google Maps requests

class GoogleMapsClient {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseUrl = 'https://maps.googleapis.com/maps/api';
  }
  async getCommuteTime(origin, destination, mode = 'driving') {
    try {
      const response = await axios.get(`${this.baseUrl}/directions/json`, {
        params: {
          origin,
          destination,
          mode,
          key: this.apiKey
        }
      });
      if (response.data.status !== 'OK') {
        throw new Error(`Google Maps API error: ${response.data.status}`);
      }
      const route = response.data.routes[0];
      const leg = route.legs[0];
      return {
        duration: leg.duration.text,
        distance: leg.distance.text,
        mode,
        route: route.overview_polyline.points
      };
    } catch (error) {
      console.error('Error getting commute time:', error);
      throw error;
    }
  }
  async getGeocode(address) {
    try {
      const response = await axios.get(`${this.baseUrl}/geocode/json`, {
        params: {
          address,
          key: this.apiKey
        }
      });
      if (response.data.status !== 'OK') {
        throw new Error(`Google Maps API error: ${response.data.status}`);
      }
      const result = response.data.results[0];
      return {
        formattedAddress: result.formatted_address,
        location: result.geometry.location,
        placeId: result.place_id
      };
    } catch (error) {
      console.error('Error geocoding address:', error);
      throw error;
    }
  }
  async getPlaceDetails(placeId) {
    try {
      const response = await axios.get(`${this.baseUrl}/place/details/json`, {
        params: {
          place_id: placeId,
          fields: 'name,formatted_address,geometry,rating,types',
          key: this.apiKey
        }
      });
      if (response.data.status !== 'OK') {
        throw new Error(`Google Maps API error: ${response.data.status}`);
      }
      return response.data.result;
    } catch (error) {
      console.error('Error getting place details:', error);
      throw error;
    }
  }
}
module.exports = GoogleMapsClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheGlvcyIsInJlcXVpcmUiLCJHb29nbGVNYXBzQ2xpZW50IiwiY29uc3RydWN0b3IiLCJhcGlLZXkiLCJiYXNlVXJsIiwiZ2V0Q29tbXV0ZVRpbWUiLCJvcmlnaW4iLCJkZXN0aW5hdGlvbiIsIm1vZGUiLCJyZXNwb25zZSIsImdldCIsInBhcmFtcyIsImtleSIsImRhdGEiLCJzdGF0dXMiLCJFcnJvciIsInJvdXRlIiwicm91dGVzIiwibGVnIiwibGVncyIsImR1cmF0aW9uIiwidGV4dCIsImRpc3RhbmNlIiwib3ZlcnZpZXdfcG9seWxpbmUiLCJwb2ludHMiLCJlcnJvciIsImNvbnNvbGUiLCJnZXRHZW9jb2RlIiwiYWRkcmVzcyIsInJlc3VsdCIsInJlc3VsdHMiLCJmb3JtYXR0ZWRBZGRyZXNzIiwiZm9ybWF0dGVkX2FkZHJlc3MiLCJsb2NhdGlvbiIsImdlb21ldHJ5IiwicGxhY2VJZCIsInBsYWNlX2lkIiwiZ2V0UGxhY2VEZXRhaWxzIiwiZmllbGRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImdvb2dsZU1hcHNDbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG4vLyBVdGlsaXR5IGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBHb29nbGUgTWFwcyBBUEkgKGRpcmVjdGlvbnMsIGdlb2NvZGUsIHBsYWNlIGRldGFpbHMpXG4vLyBJTVBPUlRBTlQ6IFVzZWQgYnkgY29tbXV0ZSBjb250cm9sbGVyIGZvciBhbGwgR29vZ2xlIE1hcHMgcmVxdWVzdHNcblxuY2xhc3MgR29vZ2xlTWFwc0NsaWVudCB7XG4gIGNvbnN0cnVjdG9yKGFwaUtleSkge1xuICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICAgIHRoaXMuYmFzZVVybCA9ICdodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGknO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q29tbXV0ZVRpbWUob3JpZ2luLCBkZXN0aW5hdGlvbiwgbW9kZSA9ICdkcml2aW5nJykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChgJHt0aGlzLmJhc2VVcmx9L2RpcmVjdGlvbnMvanNvbmAsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgb3JpZ2luLFxuICAgICAgICAgIGRlc3RpbmF0aW9uLFxuICAgICAgICAgIG1vZGUsXG4gICAgICAgICAga2V5OiB0aGlzLmFwaUtleSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXMgIT09ICdPSycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHb29nbGUgTWFwcyBBUEkgZXJyb3I6ICR7cmVzcG9uc2UuZGF0YS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJvdXRlID0gcmVzcG9uc2UuZGF0YS5yb3V0ZXNbMF07XG4gICAgICBjb25zdCBsZWcgPSByb3V0ZS5sZWdzWzBdO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkdXJhdGlvbjogbGVnLmR1cmF0aW9uLnRleHQsXG4gICAgICAgIGRpc3RhbmNlOiBsZWcuZGlzdGFuY2UudGV4dCxcbiAgICAgICAgbW9kZSxcbiAgICAgICAgcm91dGU6IHJvdXRlLm92ZXJ2aWV3X3BvbHlsaW5lLnBvaW50cyxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgY29tbXV0ZSB0aW1lOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEdlb2NvZGUoYWRkcmVzcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChgJHt0aGlzLmJhc2VVcmx9L2dlb2NvZGUvanNvbmAsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgICBrZXk6IHRoaXMuYXBpS2V5LFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN0YXR1cyAhPT0gJ09LJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEdvb2dsZSBNYXBzIEFQSSBlcnJvcjogJHtyZXNwb25zZS5kYXRhLnN0YXR1c31gKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzcG9uc2UuZGF0YS5yZXN1bHRzWzBdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZm9ybWF0dGVkQWRkcmVzczogcmVzdWx0LmZvcm1hdHRlZF9hZGRyZXNzLFxuICAgICAgICBsb2NhdGlvbjogcmVzdWx0Lmdlb21ldHJ5LmxvY2F0aW9uLFxuICAgICAgICBwbGFjZUlkOiByZXN1bHQucGxhY2VfaWQsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW9jb2RpbmcgYWRkcmVzczonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRQbGFjZURldGFpbHMocGxhY2VJZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChgJHt0aGlzLmJhc2VVcmx9L3BsYWNlL2RldGFpbHMvanNvbmAsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgcGxhY2VfaWQ6IHBsYWNlSWQsXG4gICAgICAgICAgZmllbGRzOiAnbmFtZSxmb3JtYXR0ZWRfYWRkcmVzcyxnZW9tZXRyeSxyYXRpbmcsdHlwZXMnLFxuICAgICAgICAgIGtleTogdGhpcy5hcGlLZXksXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdHVzICE9PSAnT0snKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgR29vZ2xlIE1hcHMgQVBJIGVycm9yOiAke3Jlc3BvbnNlLmRhdGEuc3RhdHVzfWApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgcGxhY2UgZGV0YWlsczonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHb29nbGVNYXBzQ2xpZW50O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7O0FBRTlCO0FBQ0E7O0FBRUEsTUFBTUMsZ0JBQWdCLENBQUM7RUFDckJDLFdBQVdBLENBQUNDLE1BQU0sRUFBRTtJQUNsQixJQUFJLENBQUNBLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLE9BQU8sR0FBRyxzQ0FBc0M7RUFDdkQ7RUFFQSxNQUFNQyxjQUFjQSxDQUFDQyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsSUFBSSxHQUFHLFNBQVMsRUFBRTtJQUMxRCxJQUFJO01BQ0YsTUFBTUMsUUFBUSxHQUFHLE1BQU1WLEtBQUssQ0FBQ1csR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDTixPQUFPLGtCQUFrQixFQUFFO1FBQ2xFTyxNQUFNLEVBQUU7VUFDTkwsTUFBTTtVQUNOQyxXQUFXO1VBQ1hDLElBQUk7VUFDSkksR0FBRyxFQUFFLElBQUksQ0FBQ1Q7UUFDWjtNQUNGLENBQUMsQ0FBQztNQUVGLElBQUlNLFFBQVEsQ0FBQ0ksSUFBSSxDQUFDQyxNQUFNLEtBQUssSUFBSSxFQUFFO1FBQ2pDLE1BQU0sSUFBSUMsS0FBSyxDQUFDLDBCQUEwQk4sUUFBUSxDQUFDSSxJQUFJLENBQUNDLE1BQU0sRUFBRSxDQUFDO01BQ25FO01BRUEsTUFBTUUsS0FBSyxHQUFHUCxRQUFRLENBQUNJLElBQUksQ0FBQ0ksTUFBTSxDQUFDLENBQUMsQ0FBQztNQUNyQyxNQUFNQyxHQUFHLEdBQUdGLEtB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